{
  "id": "blogs",
  "name": "Blogs",
  "base_url": "/blogs",
  "content": [
    {
      "id": 1,
      "title": "Android 15 Behavior Changes: All Apps",
      "url": "android_15_behavior_changes_all_apps",
      "content": "## Android 15 Behavior Changes: All Apps  /nAndroid 15 introduces several changes that impact how apps function, regardless of the target SDK version.  /n/n### Changes to package stopped state  /nAndroid 15 introduces an update to align with the original intent of the FLAG_STOPPED state. This state, accessible by long-pressing an app icon and selecting 'Force Stop' in AOSP builds, will now persist until the user actively engages with the app, either directly (launching the app) or indirectly (interacting via sharesheet, widget, or live wallpaper). The stopped state triggers cancellation of pending intents. Upon exit from stopped state, the app receives ACTION_BOOT_COMPLETED broadcast, enabling re-registration of intents. Use the ApplicationStartInfo.wasForceStopped() method to check if your app was force-stopped.  show-adsense-ad  /n/n### Support for 16 KB page sizes  /nAndroid 15 introduces support for devices with 16 KB memory page sizes, optimizing performance for devices with larger RAM. If your app uses NDK libraries, you'll need to rebuild it to work on 16 KB devices. This ensures compatibility and unlocks performance benefits.  /n/n**Benefits**  /n- Lower app launch times (3.16% average reduction) /n- Reduced power draw during app launch (4.56% reduction) /n- Faster camera launch (4.48% faster hot starts, 6.60% faster cold starts) /n- Improved system boot time (8% reduction, approximately 950 ms)  /n/n**Action required**  /n- Check if your app uses native code via APK Analyzer. /n- Rebuild your app with 16 KB support if necessary. /n- Test your app in a 16 KB environment using Android 15 emulators.  /n/n### Supporting Private Space Feature  /nAndroid 15 introduces Private Space, allowing users to separate sensitive apps with additional authentication. Some apps require changes to interact with apps in Private Space.  /n/n**Required Changes for:**  /n/n**All Apps**  /nApps in Private Space use separate user profiles. Update your app's logic to avoid assuming non-main profile installs are work profiles.  /n/n**Medical Apps**   /nPrivate Space locking disables foreground/background activities, including notifications, for apps within. Medical apps relying on critical notifications should assess impact and inform users to avoid installing in Private Space.  /n/n**Launcher apps**   /nIf you develop a launcher app, you must do the following before apps in the private space will be visible:  /n- Assign default launcher role (ROLE_HOME). /n- Declare ACCESS_HIDDEN_PROFILES permission in your app's manifest file. /n- Handle Private Space use cases: /n- Separate launcher container. /n- Determine user profile type (getLauncherUserInfo). /n- Hide/show Private Space container. /n- Lock/unlock Private Space container (requestQuietModeEnabled). /n- Register for ACTION_PROFILE_AVAILABLE/UNAVAILABLE broadcasts. /n- Update UI based on locked/unlocked state.  /n/n**App store apps**   /nTo receive the 'Install Apps' intent from Private Space, declare an with CATEGORY_APP_MARKET in your app's manifest file.  show-adsense-ad  /n/n### PNG-based emoji font removed  /nAndroid removes legacy PNG-based emoji font (NotoColorEmojiLegacy.ttf). Update your app to use vector-based font or platform APIs for text rendering. To determine if your app will be impacted, search your code for references to NotoColorEmojiLegacy.ttf. You can choose to adapt your app in a number of ways:  /n- Use Platform APIs: Leverage platform text rendering APIs for seamless integration. /n- Render Text to Bitmap: Use a Canvas to render text and obtain a raw image when needed. /n- Add COLRv1 Font Support: Integrate FreeType library (version 2.13.0+) for COLRv1 compatibility. /n- Bundle Legacy Emoji Font (Last Resort): Include NotoColorEmoji.ttf in your APK, but note that your app will miss out on latest emoji updates.  /n/n### Increased minimum target SDK version from 23 to 24  /nAndroid 15 builds upon the security foundation established in Android 14, further strengthening protections for users. In Android 15, apps with a targetSdkVersion lower than 24 can no longer be installed. Android 15 requires apps to target API level 24 or higher to ensure:  /n- Modern security and privacy standards /n- Protection against malware exploiting older API levels /n- Alignment with best practices for app development  /n/nAttempting to install an app targeting a lower API level results in an installation failure, with a message like the following one appearing in Logcat: INSTALL_FAILED_DEPRECATED_SDK_VERSION: App package must target at least SDK version 24, but found 7  /n/nCamera and media Improved Audio Resource Management Prior to Android 15, apps would fail to open a new AudioTrack when resource limits were reached during direct or offload audio playback. In Android 15, when resource limits are reached, the system will now invalidate existing open AudioTrack objects to accommodate new direct or offload playback requests. Direct and offload audio tracks are used for:  /n/n- Compressed audio playback (e.g., streaming encoded audio over HDMI to TV) /n- Hardware DSP acceleration on mobile devices   /n/n**Key Benefits:**  /n- Improved audio resource allocation /n- Reduced playback failures due to resource constraints /n- Enhanced overall audio performance  /n/n**Developer Impact:**  /n- Apps requesting direct or offload playback may experience AudioTrack invalidation when resource limits are reached /n- Ensure your app handles AudioTrack invalidation and re-creation gracefully  show-adsense-ad  /n/n### User experience and system UI  /n/n**Enhanced Predictive Back Animations**  /nStarting with Android 15, predictive back animations are now enabled by default for apps that have opted into the predictive back gesture, either fully or at the activity level. This change eliminates the need for the developer option, and system animations such as back-to-home, cross-task, and cross-activity will now be visible for these apps.  /nEnsure seamless integration with predictive back navigation:  /n- Verify that your app has been properly migrated to use the predictive back gesture. /n- Ensure that fragment transitions are compatible with predictive back navigation. /n- Replace framework transitions with:     /n/t* Animator     /n/t* AndroidX transitions /n- Update your app's navigation architecture by migrating away from unknown back stacks and instead utilizing back stacks managed by FragmentManager or the Navigation component.  /n/n**Force-Stopping Apps Now Affects Widgets**  /nStarting with Android 15, force-stopping an app temporarily disables its widgets. When a user force-stops an app, the system:  /n- Grays out all app widgets /n- Prevents user interaction with widgets /n- Cancels all pending intents  /nWhen the user launches the app again, the system re-enables the widgets, restoring full functionality.  /n/n**Enhanced User Privacy**   /nMedia Projection Status Bar Chip Android 15 introduces a prominent status bar chip to alert users to ongoing screen sharing, casting, or recording, addressing potential privacy risks. Users can tap the chip to stop their screen from being shared, cast, or recorded. For added convenience and security, screen projection now automatically suspends when your device screen locks.  /nCheck if your app is impacted By default, your app includes the new status bar chip and automatically suspends screen projection when the lock screen activates. Ensure seamless functionality by implementing the MediaProjection.Callback onStop() method and verifying your app's response to:  /n* User-tapped status bar chip /n* Lock screen activation",
      "keywords": "Android 15, Android 15 behavior changes, Android 15 updates, Android 15 features, Android 15 compatibility, Android 15 behavior changes for all apps, Android 15 updates for app developers, Android 15 security features for apps, Android 15 performance optimization techniques, Android 15 API changes for developers",
      "titleTag": "Android 15 Behavior Changes: All Apps",
      "descriptionTag": "Android 15 : Discover the latest Android 15 behavior changes that affect all apps. Learn about the Android 15 new features, Android 15 updates, and requirements that impact app development and user experience.",
      "shortDesc": "Android 15 introduces significant behavior changes for all apps, focusing on security, performance & user experience.    /n/nKey updates include:    /n- Enhanced package stopped state & FLAG_STOPPED state  /n- 16KB page size support for improved performance  /n- Private space features for increased security  /n- Predictive back animations & media projection updates  /n- Widget management enhancements    /n/nStay ahead with the latest Android 15 updates and optimize your app's functionality.",
      "lastModified": "2025-08-03T00:20:02.761Z"
    },
    {
      "id": 2,
      "title": "CELPIP Success Guide: Free Practice Tests, Expert Tips & Exam Format Explained",
      "url": "celpip-practice-tests-and-celpip-exam-format",
      "content": "show-adsense-ad # CELPIP Success Guide: Free Practice Tests, Expert Tips & Exam Format Explained  /n/n## Understanding the CELPIP Exam Format: Your Gateway to Canadian Immigration  /n/nAre you planning to immigrate to Canada or obtain Canadian citizenship? The CELPIP exam format is your critical pathway to demonstrating English language proficiency. This comprehensive guide will break down the CELPIP test format, providing expert insights into the CELPIP listening format, reading format, speaking format, and writing format, along with preparation strategies and free sample tests.  /n/n### What is the CELPIP Exam Format?  /n/nThe Canadian English Language Proficiency Index Program (CELPIP) is a standardized English language proficiency test specifically designed to assess language skills for Canadian immigration and citizenship processes. The CELPIP exam format uniquely evaluates your ability to communicate effectively in English across multiple contexts.  /n/n## Comprehensive CELPIP Test Format Breakdown  /n/n### CELPIP Exam Components: A Detailed Overview of Listening, Reading, Writing, and Speaking Formats  /n/nThe CELPIP test format comprises four essential components, each meticulously designed to assess different aspects of English language proficiency:  show-adsense-ad  /n/n### 1. Detailed CELPIP Listening Format /n- *Duration:* 47-55 minutes /n- *Structure:* 6 distinct parts testing comprehensive listening skills /n- *Key Focus:* Understanding English conversations, discussions, and talks  /n/n*Comprehensive CELPIP Listening Format Parts:* /n1. Listening to Problem Solving /n2. Listening to a Daily Life Conversation /n3. Listening for Information /n4. Listening to a News Item /n5. Listening to a Discussion /n6. Listening to Viewpoints  /n/n#### CELPIP Listening Format Tips: /n- Practice active listening techniques /n- Develop note-taking skills /n- Familiarize yourself with various English accents /n- Use CELPIP listening format practice tests  /n/n### 2. Comprehensive CELPIP Reading Format /n- *Duration:* 55-60 minutes /n- *Structure:* 4 comprehensive reading assessment parts /n- *Key Focus:* Reading and understanding complex English texts  /n/n*Detailed CELPIP Reading Format Parts:* /n1. Reading Correspondence /n2. Reading to Apply a Diagram /n3. Reading for Information /n4. Reading for Viewpoints  /n/n#### CELPIP Reading Format Strategies: /n- Improve reading speed /n- Practice skimming and scanning techniques /n- Expand academic and general vocabulary /n- Use CELPIP reading format sample tests  show-adsense-ad  /n/n### 3. Comprehensive CELPIP Writing Format /n- *Duration:* 53-60 minutes /n- *Structure:* 2 writing tasks /n- *Key Focus:* Producing clear, coherent written communication  /n/n*CELPIP Writing Format Tasks:* /n1. Writing an Email /n2. Responding to Survey Questions  /n/n#### CELPIP Writing Format Preparation: /n- Practice formal and informal writing styles /n- Develop clear, concise writing skills /n- Work on time management /n- Utilize CELPIP writing format practice materials  /n/n### 4. Detailed CELPIP Speaking Format /n- *Duration:* 15-20 minutes /n- *Structure:* 8 speaking tasks /n- *Key Focus:* Demonstrating verbal communication and fluency  /n/n*CELPIP Speaking Format Tasks:* /n1. Giving Advice /n2. Talking about a Personal Experience /n3. Describing a Scene /n4. Making Predictions /n5. Comparing and Persuading /n6. Dealing with a Difficult Situation /n7. Expressing Opinions /n8. Describing an Unusual Situation  /n/n#### CELPIP Speaking Format Tips: /n- Practice pronunciation and fluency /n- Record and analyze your speaking /n- Develop confidence in English communication /n- Use CELPIP speaking format mock tests  show-adsense-ad  /n/n## Free CELPIP Practice Tests and Preparation Resources /n/n### Free CELPIP Practice Tests Collection /nBoost your exam preparation with our comprehensive free sample tests on this [YouTube channel](https://www.youtube.com/channel/UC1xgiplZlCon-XLhgR_bIXg): /n- CELPIP Listening Format Sample Tests /n- CELPIP Reading Format Practice Materials /n- CELPIP Writing Format Example Tests /n- CELPIP Speaking Format Mock Exams  /n/nSubscribe to our [channel](https://www.youtube.com/channel/UC1xgiplZlCon-XLhgR_bIXg) now and get instant access to our FREE CELPIP practice tests!  /n/n### Recommended Preparation Resources /n- [Official CELPIP practice test portal (requires CELPIP login)](https://www.celpip.ca/) /n- Online practice platforms /n- [YouTube tutorial channel](https://www.youtube.com/channel/UC1xgiplZlCon-XLhgR_bIXg) /n- Language learning mobile applications  /n/n## Proven Strategies for CELPIP Exam Mastery  /n/n1. *Comprehensive Format Familiarization*    /n- Understand each component of the CELPIP test format    /n- Practice with official CELPIP sample tests    /n- Learn timing and question types for each section  /n/n2. *Targeted Skill Development*    /n- Improve listening comprehension    /n- Enhance reading speed and understanding    /n- Develop writing clarity and coherence    /n- Boost speaking fluency and pronunciation  /n/n3. *Effective Time Management*    /n- Practice completing each section within allocated timeframes    /n- Use mock tests to simulate real exam conditions    /n- Develop strategies for quick, accurate responses  show-adsense-ad  /n/n## Final Thoughts on CELPIP Test Format Success  /n/nMastering the CELPIP exam format requires: /n- Consistent practice with sample tests /n- Strategic preparation across all formats /n- Confidence in your English communication skills  /n/n*Pro Tip:* Start your CELPIP preparation early, remain motivated, and approach the exam with a well-structured study plan using free sample tests and comprehensive preparation materials.  /n/nBy understanding the intricate CELPIP test format and implementing targeted preparation strategies, you'll be well-positioned to achieve your Canadian immigration and citizenship goals.",
      "keywords": "CELPIP practice test, CELPIP reading practice test, free CELPIP practice tests, CELPIP reading format, CELPIP writing format, CELPIP speaking format, CELPIP listening format, CELPIP exam format, CELPIP test format, CELPIP free sample tests, Free CELPIP practice, CELPIP login, CELPIP preparation",
      "titleTag": "CELPIP Success Guide: Free Practice Tests, Expert Tips & Exam Format Explained",
      "descriptionTag": "Free CELPIP practice tests and expert study guides. Learn CELPIP exam format, scoring, and strategies. Boost your reading, writing, listening, and speaking skills.",
      "shortDesc": "/nDiscover the CELPIP test format, expert tips, and strategies to boost your scores! Get FREE practice tests for CELPIP Reading, Listening, Speaking, and Writing to strengthen your preparation.  /n/n#### CELPIP Test Format: /nListening, Reading, Writing, and Speaking components  /n/n#### Expert Tips & Strategies: /nImprove your English language skills, manage your time effectively, and build your confidence!  /n/n#### Get FREE CELPIP Practice Tests! /nSubscribe to our [YouTube channel](https://www.youtube.com/channel/UC1xgiplZlCon-XLhgR_bIXg) for comprehensive CELPIP practice tests.",
      "lastModified": "2025-08-03T00:20:02.761Z"
    },
    {
      "id": 3,
      "title": "What is Kotlin Multiplatform? A Deep Dive into Cross-Platform App Development",
      "url": "what-is-kotlin-multiplatform-deep-dive-cross-platform-app-development",
      "content": "show-adsense-ad # What is Kotlin Multiplatform? A Deep Dive into Cross-Platform App Development/n /n Kotlin Multiplatform (KMP) is an innovative cross-platform development technology created by JetBrains. It enables developers to share code seamlessly across various platforms while still allowing for platform-specific implementations when necessary. This flexibility makes Kotlin Multiplatform a powerful solution for building applications that run on multiple operating systems, including Android, iOS, and web applications. By leveraging KMP, developers can streamline their workflow and enhance productivity in cross-platform app development./n /n ## Key Features of Kotlin Multiplatform/n /n When exploring what is Kotlin Multiplatform, it's essential to understand its key features that make it a standout choice for cross-platform app development:/n /n - **Shared Code**: With Kotlin Multiplatform, developers can write a single codebase that is reusable across multiple platforms, significantly reducing redundancy and development time./n - **Platform-Specific Code**: Kotlin Multiplatform allows for the creation of platform-specific code that is compiled only for the designated platform, ensuring optimal performance and user experience tailored to each environment./n - **Compilation**: Kotlin Multiplatform compiles both the shared code and platform-specific code into platform-specific binaries, facilitating easy deployment across various platforms./n - **Interoperability**: Kotlin Multiplatform's robust interoperability features empower developers to seamlessly access platform-specific APIs and frameworks, significantly enhancing the functionality and integration of applications across various platforms./n /n show-adsense-ad ## Setting Up Kotlin Multiplatform for Cross-Platform App Development in Android Studio/n /n Kotlin Multiplatform has revolutionized cross-platform app development by enabling developers to share code across multiple platforms. This guide will help you set up your first Kotlin Multiplatform project for efficient cross-platform app development./n /n #### 1. Prerequisites for Kotlin Multiplatform Development:/n - Download and Install Android Studio (Latest Stable Version)/n - Install the latest version of Java Development Kit (JDK) from the official Oracle website (Android Studio usually includes this)/n - Ensure your system meets the requirements for cross-platform app development/n /n #### 2. Enable Kotlin Multiplatform Plugin:/n - Open Android Studio/n - Go to File > Settings (on Windows/Linux) or Android Studio > Preferences (on macOS)/n    ![Android Studio Settings](/assets/android_studio_settings.png)  /n - Navigate to Plugins/n - Search for **\"Kotlin Multiplatform\"**/n - Install the plugin and restart Android Studio/n  ![Kotlin Multiplatform Plugin](/assets/kotlin_multiplatform_plugin.png)/n /n show-adsense-ad ## Create a New Kotlin Multiplatform Project in Android Studio/n /n - Open Android Studio/n - Click \"New Project\"/n - Select **\"Kotlin Multiplatform App\"**/n /n ![Kotlin Multiplatform App](/assets/kotlin_multiplatform_app.png)/n  - Choose a project name and location/n /n ![Kotlin Multiplatform App Details](/assets/kotlin_multiplatform_app_details.png)/n /n ![Kotlin Multiplatform Modules](/assets/kotlin_multiplatform_modules.png)/n /n Now, your project has been created. If you look at the top menu, you'll notice that you can run both Android and iOS platforms directly from Android Studio, as shown in the image below./n /n ![Kotlin Multiplatform Build](/assets/kotlin_multiplatform_build.png)/n /n If you run both the Android and iOS versions of the application, the results will be displayed as shown below./n /n ![Kotlin Multiplatform Output](/assets/kotlin_multiplatform_output.png)/n /n ### The generated Kotlin Multiplatform project consists of three primary modules:/n /n - **Shared Module**: In Kotlin Multiplatform, this module contains the shared logic that is common across all platforms, serving as the foundation for efficient cross-platform app development. It enables seamless code sharing and maintains consistency in your Kotlin Multiplatform project while facilitating robust cross-platform app development./n - **Android App Module**: This module in your Kotlin Multiplatform project includes code that is specific to the Android platform and utilizes the shared module as a standard Android library. It demonstrates how Kotlin Multiplatform enables platform-specific implementations while maintaining cross-platform app development efficiency./n - **iOS App Module**: As part of the Kotlin Multiplatform architecture, this module encompasses the iOS-specific code and employs the shared module as a regular Xcode framework, as specified in our project configuration for cross-platform app development. While there is an option to build the module as a CocoaPod in your Kotlin Multiplatform project, we will continue using the regular framework for the time being./n /n ## Overview of Kotlin Multiplatform Project Structure/n /n Here is the structure of a Kotlin Multiplatform project, highlighting the distinction between shared and platform-specific code, and how to define supported platforms./n /n ![Kotlin Multiplatform Project Structure](/assets/kotlin_multiplatform_project_structure.png)/n /n ### Key Concepts in Kotlin Multiplatform for Cross-Platform App Development/n /n - **Common Code in Kotlin Multiplatform**: This is the shared Kotlin code located in the **commonMain** directory, which forms the foundation of cross-platform app development by compiling for multiple platforms. For example:/n /n ``` /n fun greeting() {/n     println(\"Hello, Kotlin Multiplatform!\")/n }/n  ``` /n The Kotlin Multiplatform compiler generates platform-specific binaries from this code, enabling efficient cross-platform app development, though it cannot include platform-specific functions./n /n - **Targets in Kotlin Multiplatform**: Targets represent the platforms (e.g., JVM, JS, Android, iOS) that your cross-platform app development project will support. When using Kotlin Multiplatform, you declare targets in Gradle using:/n /n ``` /n kotlin {/n     jvm() // JVM target/n     iosArm64() // iOS target/n }/n ``` /n - **Source Sets for Cross-Platform App Development**: In Kotlin Multiplatform, source sets group source files with specific targets, dependencies, and compiler options. The **commonMain** source set is available in all Kotlin Multiplatform projects, while **platform-specific source sets (e.g., jvmMain, iosMain)** are created for each target to support comprehensive cross-platform app development./n /n Here's how to access source sets in Gradle scripts using the Kotlin Multiplatform configuration block:/n /n ``` /n kotlin {/n     // Targets declaration:/n     // Source set declaration for cross-platform app development:/n     sourceSets {/n         commonMain {/n             // Configure the commonMain source set/n         }/n     }/n }/n ``` /n - **Platform-Specific Source Sets**: These allow the use of platform-specific APIs. For instance, **jvmMain** can utilize Java libraries, while **iosMain** can access iOS-specific APIs./n /n In a multiplatform project with native and JS targets, the following code in commonMain doesn't compile:/n /n ``` /n // commonMain/kotlin/common.kt/n // Doesn't compile in common code/n fun greeting() {/n     java.io.File(\"greeting.txt\").writeText(\"Hello, Multiplatform!\")/n }/n ``` /n As a solution, Kotlin introduces platform-specific source sets, commonly known as platform source sets. Each target is associated with its own platform source set that compiles exclusively for that target. For instance, the Android target has the corresponding **androidMain** source set, which compiles specifically for Android. In these source sets, Kotlin permits the use of platform-specific dependencies, such as Android libraries in androidMain. Here’s an example:/n /n ``` /n // androidMain/kotlin/android.kt/n // You can use Android-specific dependencies in the `androidMain` source set/n fun androidGreeting() {/n     val file = File(context.filesDir, \"greeting.txt\")/n     file.writeText(\"Hello, Kotlin Multiplatform!\")/n }/n ``` /n - **Intermediate Source Sets**: These source sets compile to some, but not all, targets. They help avoid code duplication when sharing functionality across similar platforms, such as all Apple devices./n /n In simple Kotlin Multiplatform projects, you typically have only common and platform-specific code. The commonMain source set contains code shared across all declared targets, while platform-specific source sets, like jvmMain, compile code exclusively for their respective targets./n /n However, more granular code sharing is often necessary. For example, if you want to target all modern Apple devices and Android devices, you might define targets like this:/n /n ``` /n kotlin {/n     androidTarget()/n     iosArm64()   // 64-bit iPhone devices/n     macosArm64() // Apple Silicon Macs/n     watchosX64() // Apple Watch devices/n     tvosArm64()  // Apple TV devices/n }/n ``` /n If you need to generate a UUID for Apple devices using the NSUUID API, you cannot place this function in commonMain, as it would cause errors when compiling for Android, where NSUUID is unavailable./n /n Instead of duplicating the code across each **Apple-specific source set (e.g., iosArm64Main, macosArm64Main)**, you can utilize intermediate source sets. These source sets compile to some, but not all, targets, allowing for better code organization and reuse./n /n Kotlin automatically creates certain intermediate source sets, such as **appleMain**, which compiles only for Apple targets. This allows you to use Apple-specific APIs within appleMain, enabling you to add the randomUuidString() function there. During compilation, Kotlin combines all relevant source sets, including intermediate ones, for the specified target./n /n show-adsense-ad ## Defining the appleMain Source Set in Your Kotlin Multiplatform Project/n /n ### Create the appleMain Source Set/n /n You can define the appleMain source set in the sourceSets block of your build.gradle.kts file. Here’s how to do it:/n /n ``` /n kotlin {/n     sourceSets {/n         val appleMain by creating {/n             // Specify dependencies and configurations for the appleMain source set/n             dependsOn(commonMain) // This allows appleMain to access common code/n         }/n /n         val iosArm64Main by getting {/n             dependsOn(appleMain) // Link iosArm64Main to appleMain/n         }/n /n         val macosArm64Main by getting {/n             dependsOn(appleMain) // Link macosArm64Main to appleMain/n         }/n /n         val watchosX64Main by getting {/n             dependsOn(appleMain) // Link watchosX64Main to appleMain/n         }/n /n         val tvosArm64Main by getting {/n             dependsOn(appleMain) // Link tvosArm64Main to appleMain/n         }/n     }/n }/n ``` /n ### Create the Directory Structure/n /n After defining the appleMain source set in your Gradle file, create the corresponding directory structure in your project. The typical structure would look like this:/n /n ``` /n /src/n     /commonMain/n         /kotlin/n     /appleMain/n         /kotlin/n     /iosArm64Main/n         /kotlin/n     /macosArm64Main/n         /kotlin/n     /watchosX64Main/n         /kotlin/n     /tvosArm64Main/n         /kotlin/n ``` /n ### Add Code to appleMain/n You can now add any Apple-specific code to the appleMain source set. /n For example, if you want to create a function that generates a UUID for Apple devices, you can do so in a Kotlin file within the appleMain/kotlin directory:/n /n ``` /n // appleMain/kotlin/AppleUtils.kt/n import platform.Foundation.NSUUID/n /n fun randomUuidString(): String {/n     return NSUUID().UUIDString()/n }/n ``` /n ## Compilation Process/n /n When compiling a Kotlin Multiplatform project, Kotlin collects all relevant source sets labeled for a specific target and produces the corresponding binaries. For example, compiling for the JVM involves both commonMain and jvmMain./n",
      "keywords": "kotlin multiplatform, cross platform app development, what is kotlin multiplatform, kotlin multiplatform mobile, kotlin cross platform, kotlin kmm, mobile app development, android app development, apps development, multiplatform mobile app",
      "titleTag": "What is Kotlin Multiplatform? A Deep Dive into Cross-Platform App Development",
      "descriptionTag": "Master Kotlin Multiplatform in 2025 with our step-by-step guide. Learn project setup, build your first cross-platform app, and understand essential KMP architecture. Perfect for developers looking to write once and deploy everywhere across iOS, Android, web, and desktop platforms.",
      "shortDesc": "A comprehensive beginner-to-intermediate guide for developers exploring Kotlin Multiplatform in 2025. We cover essential setup steps, walk through building your first cross-platform application, and explain the fundamental project structure patterns to help you deploy seamlessly across iOS, Android, and desktop platforms.",
      "lastModified": "2025-08-03T00:20:02.761Z"
    },
    {
      "id": 4,
      "title": "Compose Multiplatform : Create Your First Compose Multiplatform App",
      "url": "what-is-compose-multiplatform",
      "content": "# Compose Multiplatform : Create Your First Compose Multiplatform App/n/n[Kotlin Multiplatform](https://kotlinlang.org/docs/multiplatform.html) powers [Compose Multiplatform](https://www.jetbrains.com/compose-multiplatform/), a robust UI framework developed by [JetBrains](https://www.jetbrains.com/), the creators of [Kotlin](https://kotlinlang.org/docs/getting-started.html). This innovative framework enables developers to build user interfaces for a diverse range of platforms, including Android, iOS, desktop (Windows, macOS, Linux), and web applications, all from a single codebase./n/nBuilt on the foundation of the Kotlin programming language, Compose Multiplatform utilizes a modern, declarative approach that simplifies and enhances the process of creating visually appealing and responsive user interfaces. This capability significantly improves the cross-platform app development process, allowing developers to maintain consistency and streamline their workflow across multiple platforms./n/n## Key Features of Compose Multiplatform for Cross-Platform App Development/n/n[Compose Multiplatform](https://www.jetbrains.com/compose-multiplatform/) offers a range of compelling features that make it an excellent choice for developers engaged in cross-platform app development:/n/n- **Single Codebase**: With Compose Multiplatform, developers can write a single codebase for user interfaces that can be deployed across various platforms, including Android, iOS, desktop, and web applications. This significantly streamlines the development process./n- **Declarative UI**: Compose Multiplatform employs a declarative programming model, allowing developers to specify what the UI should look like rather than detailing how to implement it. This approach simplifies UI development and improves code readability./n- **Real-time Previews**: Compose Multiplatform provides real-time previews of UI components, enabling developers to see changes instantly as they code. This feature accelerates the development process and enhances productivity./n- **Material Design Support**: Compose Multiplatform includes built-in support for Material Design, allowing developers to create visually appealing and consistent user interfaces that align with modern design principles./n- **State Management**: Compose Multiplatform offers robust state management capabilities, making it easier to handle UI states and respond to user interactions seamlessly, which is crucial for creating dynamic applications./n- **Interoperability**: Designed to work harmoniously with existing codebases, Compose Multiplatform allows developers to integrate it into their projects without the need to rewrite everything from scratch, facilitating a smoother transition./n- **Extensibility**: Developers can create custom components and extend existing ones, providing the flexibility needed to build unique user interfaces tailored to specific application requirements./n- **Cross-Platform Consistency**: By utilizing a single codebase, Compose Multiplatform ensures a consistent user experience across different platforms, reducing the effort required to maintain separate UI implementations./n- **Kotlin Language Features**: Leveraging the power of Kotlin, developers can take advantage of modern language features such as coroutines, extension functions, and type safety, which enhance productivity and improve code quality./n/n[Kotlin Multiplatform](https://kotlinlang.org/docs/multiplatform.html)  is centered on sharing business logic and code across various platforms, making it an essential tool for developers. In contrast, Compose Multiplatform is dedicated to constructing user interfaces in a declarative manner for those same platforms. When combined, they deliver a comprehensive solution for cross-platform app development, enabling developers to efficiently share code while creating rich and engaging user experiences./n/n## Setting Up Compose Multiplatform for Cross-Platform App Development/n/n​​Compose Multiplatform has transformed cross-platform app development by allowing developers to share UI code across multiple platforms seamlessly. This guide will assist you in setting up your first Compose Multiplatform project for efficient cross-platform app development./n/n### 1. Prerequisites for Compose Multiplatform Development:/nDownload and Install [Android Studio(Latest Stable Version)](https://developer.android.com/studio) /nInstall the latest version of the [Java Development Kit (JDK)](https://www.oracle.com/java/technologies/downloads/?er=221886) from the official Oracle website (Android Studio usually includes this)/nLaunched [Xcode](https://apps.apple.com/us/app/xcode/id497799835) at least once and accepted the terms of use if you plan to build iOS apps./n/n### 2. Verifying Your Environment Setup/nOnce you have set up your environment, ensure everything is functioning correctly by following these steps:/n/n- #### Install [KDoctor](https://github.com/Kotlin/kdoctor#installation) (MacOS only):/nOpen your terminal and run the following command:/n```/nbrew install kdoctor/n```/n/n- #### Run [KDoctor](https://github.com/Kotlin/kdoctor#installation) :/nAfter the installation is complete, execute KDoctor in the console by typing:/n```/nkdoctor/n```/n- #### Review Diagnostics:/nIf [KDoctor](https://github.com/Kotlin/kdoctor#installation) identifies any issues while checking your environment, carefully review the output for problems and suggested solutions./n/n### 3. Enable [Kotlin Multiplatform Plugin](https://kotlinlang.org/docs/multiplatform-plugin-releases.html?_gl=1*1813ebx*_gcl_au*MTM5MzkxMTgxNS4xNzMxOTQxMDI2*FPAU*MTM5MzkxMTgxNS4xNzMxOTQxMDI2*_ga*NDkyNDI2NzUzLjE3MTkyMzI0Mjg.*_ga_9J976DJZ68*MTczMjE3Mzc1NC44LjEuMTczMjE3Mzc5MC4yNC4wLjA.)  :/n/n- Open Android Studio/n- Go to File > Settings (on Windows/Linux) or Android Studio > Preferences (on macOS)/n/n/n![Android Studio Settings](/assets/android_studio_settings.png)/n/n- Navigate to Plugins/n- Search for \\\"Kotlin Multiplatform\\\"/n- Install the plugin and restart Android Studio/n/n![Kotlin Multiplatform Plugin](/assets/kotlin_multiplatform_plugin.png)/n/n## Create a New Compose Multiplatform Project using the Kotlin Multiplatform Wizard/n/n- Launch the [Kotlin Multiplatform wizard](https://kmp.jetbrains.com/?_gl=1*q2hlao*_gcl_au*MTM5MzkxMTgxNS4xNzMxOTQxMDI2*FPAU*MTM5MzkxMTgxNS4xNzMxOTQxMDI2*_ga*NDkyNDI2NzUzLjE3MTkyMzI0Mjg.*_ga_9J976DJZ68*MTczMjI1NjY5OC4xMC4xLjE3MzIyNTY3MDAuNTguMC4w) /n/n![Kotlin Multiplatform Wizard](/assets/kotlin-multiplatform-wizard.png)/n/n- In the New Project tab, update the project name to \\\"ComposeFirstApp\\\" and set the project ID to \\\"org.example.composeapp\\\"/n- Choose the options for Android, iOS, Desktop, and Web./n- Click the Download button and extract the contents of the resulting archive./n- Open Android Studio/n- Select File -> Open from top menu and select extracted compose multiplatform app/n/n## Overview of Compose Multiplatform Project Structure/nHere is the architecture of a Compose Multiplatform project./n/n![Compose Multiplatform Project Architecture](/assets/compose-multiplatform-project-architecture.png)/n/nThis architecture enables developers to write shared business logic and UI code once in commonMain while maintaining the flexibility to implement platform-specific features in dedicated source sets. The shared code compiles to Kotlin/JVM (Android, desktop), Kotlin/Native (iOS), and Kotlin/Wasm (web), maximizing code reuse while preserving native performance on each platform./n/nThe structure of your Compose Multiplatform project in Android Studio will appear as follows:/n/n![Compose Multiplatform Project Structure](/assets/compose-multiplatform-project-structure.png)/n/nThe project consists of two modules:/n/n### 1) composeApp: /nThis is a Kotlin module that houses the shared logic utilized across Android, desktop, iOS, and web applications. It contains the code that is common to all platforms and employs Gradle as the build system to automate the build process. /n/nThe composeApp module includes the following source sets: androidMain, commonMain, desktopMain, iosMain, and wasmJsMain. A source set is a Gradle concept that groups related files together, with each group having its own dependencies. In Kotlin Multiplatform, different source sets can be targeted to specific platforms./n/nThe commonMain source set contains shared Kotlin code, while the platform-specific source sets include Kotlin code tailored for each target. Kotlin/JVM is utilized for both androidMain and desktopMain, whereas Kotlin/Native is employed for iosMain. In contrast, Kotlin/Wasm is used for wasmJsMain./n/nWhen the shared module is compiled into an Android library, the common Kotlin code is treated as Kotlin/JVM. For an iOS framework, the common Kotlin code is treated as Kotlin/Native. When building a web application, the common Kotlin code is treated as Kotlin/Wasm. As a best practice, aim to implement functionality as common code whenever possible to avoid duplicating logic in platform-specific source sets./n/n### 2) iosApp: /nThis module is an Xcode project designed to compile into an iOS application. It relies on the shared module, using it as an iOS framework./n/n## Run your Compose Multiplatform application/n### Running Your Compose Multiplatform Application on Android/n/n- To get started, create an [Android virtual device](https://developer.android.com/studio/run/managing-avds#createavd)/n- In the run configurations list, select composeApp./n- Next, choose your Android virtual device and click Run. Android Studio will launch the selected virtual device if it is currently powered off and will then run the app./n/n![Compose Multiplatform App Android Output](/assets/compose-multiplatform-app-android-output.png)/n/n### Running Your Compose Multiplatform Application on iOS/n/nTo begin, open Xcode in a separate window to finalize the initial setup. If this is your first time launching Xcode, you may need to accept the license terms and allow it to complete some essential setup tasks./n/nNext, in Android Studio, choose iosApp from the list of run configurations and click Run. By default, this configuration will launch a simulated device available in Xcode and run the app on it. If you do not see an available iOS configuration in the list, you can create a new run configuration./n/n![Compose Multiplatform App ios Output](/assets/compose-multiplatform-app-ios-output.png)/n/n### Running Your Compose Multiplatform Web Application/n/nTo run the web application, create a new run configuration:/n/n- Select Run | Edit Configurations from the main menu./n- Click the plus button and choose Gradle from the dropdown menu./n- In the Tasks and arguments field, enter the following command./n/n```/nwasmJsBrowserRun -t --quiet/n```/n/n![Compose Multiplatform Web Configuration](/assets/compose-multiplatform-web-configuration.png)/n/n- Click OK to save the configuration./n/nNow you can use this configuration to run the web app:/n/n![Compose Multiplatform Run Web](/assets/compose-multiplatform-run-web.png)/n/nWhen you run the Compose Multiplatform app on desktop, the web application will automatically open in your browser. Alternatively, once the run is complete, you can access it by typing the following URL in your browser: /n/n```/nhttp://localhost:8080//n```/n/n![Compose Multiplatform App Web Output](/assets/compose-multiplatform-app-web-output.png)/n/n### Running Your Compose Multiplatform Application on Desktop/n/nTo run the desktop application, create a new run configuration by following these steps:/n/n- Select Run | Edit Configurations from the main menu./n- Click the plus button and choose Gradle from the dropdown menu./n- In the Tasks and arguments field, enter the following command/n/n```/ncomposeApp:run/n```/n/n![Compose Multiplatform Desktop Configuration](/assets/compose-multiplatform-desktop-configuration.png)/n/n- Click OK to save the configuration./n/nYou can now use this configuration to launch the desktop app in its own operating system window./n/n![Compose Multiplatform Run Desktop](/assets/compose-multiplatform-run-desktop.png)/n/n![Compose Multiplatform Desktop Output](/assets/compose-multiplatform-desktop-output.png)/n/n## Resources to Learn More/n/n- Official Documentation: [Compose Multiplatform](https://www.jetbrains.com/lp/compose-multiplatform/)/n- GitHub Repository: [JetBrains/Compose Multiplatform](https://github.com/JetBrains/compose-jb)/n/n## Related Topics /n/n- [What is Kotlin Multiplatform? A Deep Dive into Cross-Platform App Development](https://www.droidbiz.in/blogs/what-is-kotlin-multiplatform-deep-dive-cross-platform-app-development)",
      "keywords": "compose multiplatform, cross platform app development, what is compose multiplatform, compose multiplatform mobile, compose cross platform, kotlin kmm, mobile app development, android app development, apps development, multiplatform mobile app",
      "titleTag": "Compose Multiplatform : Create Your First Compose Multiplatform App",
      "descriptionTag": "Discover how to get started with Compose Multiplatform! This comprehensive guide walks you through the essential project structure and shows you how to build your first cross-platform application. Learn how Compose Multiplatform enables you to write shared UI code once and deploy it across Android, iOS, desktop, and web platforms. Perfect for developers looking to streamline their workflow and create consistent user experiences across multiple platforms with minimal platform-specific code.",
      "shortDesc": "Discover how to get started with Compose Multiplatform! This comprehensive guide walks you through the essential project structure and shows you how to build your first cross-platform application. Learn how Compose Multiplatform enables you to write shared UI code once and deploy it across Android, iOS, desktop, and web platforms. Perfect for developers looking to streamline their workflow and create consistent user experiences across multiple platforms with minimal platform-specific code.",
      "lastModified": "2025-08-03T00:20:02.761Z"
    }
  ],
  "keywords": "Android 15, Android 15 behavior changes, Android 15 updates, Android 15 features, Android 15 compatibility, Android 15 behavior changes for all apps, Android 15 updates for app developers, Android 15 security features for apps, Android 15 performance optimization techniques, Android 15 API changes for developers",
  "titleTag": "Android 15 Behavior Changes: All Apps",
  "descriptionTag": "Android 15 : Discover the latest Android 15 behavior changes that affect all apps. Learn about the Android 15 new features, Android 15 updates, and requirements that impact app development and user experience.",
  "totalPages": 4,
  "lastUpdated": "2025-08-03T00:20:02.761Z"
}